// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using XPTO.Data.Context;

#nullable disable

namespace XPTO.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClienteConsulta", b =>
                {
                    b.Property<Guid>("ClientesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConsultasId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClientesId", "ConsultasId");

                    b.HasIndex("ConsultasId");

                    b.ToTable("ClienteConsulta");
                });

            modelBuilder.Entity("OperacaoUsuario", b =>
                {
                    b.Property<Guid>("OperacoesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuariosId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OperacoesId", "UsuariosId");

                    b.HasIndex("UsuariosId");

                    b.ToTable("OperacaoUsuario");
                });

            modelBuilder.Entity("XPTO.Domain.Entities.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Nome");

                    b.HasKey("Id");

                    b.ToTable("Cliente", (string)null);
                });

            modelBuilder.Entity("XPTO.Domain.Entities.Consulta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContratoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Contrato");

                    b.Property<Guid>("FornecedorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Login");

                    b.Property<Guid>("PlanoTarifacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ContratoId")
                        .IsUnique()
                        .HasFilter("[Contrato] IS NOT NULL");

                    b.HasIndex("FornecedorId");

                    b.HasIndex("PlanoTarifacaoId");

                    b.ToTable("Consulta", (string)null);
                });

            modelBuilder.Entity("XPTO.Domain.Entities.Contrato", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConsultaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataVigencia")
                        .HasColumnType("datetime2")
                        .HasColumnName("Data_Vigencia");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("Valor");

                    b.HasKey("Id");

                    b.ToTable("Contrato", (string)null);
                });

            modelBuilder.Entity("XPTO.Domain.Entities.Fornecedor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Descricao");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Nome");

                    b.HasKey("Id");

                    b.ToTable("Fornecedor", (string)null);
                });

            modelBuilder.Entity("XPTO.Domain.Entities.Operacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataOperacao")
                        .HasColumnType("datetime2")
                        .HasColumnName("Data_Operacao");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Descricao");

                    b.HasKey("Id");

                    b.ToTable("Operacao", (string)null);
                });

            modelBuilder.Entity("XPTO.Domain.Entities.PlanoTarifacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataVigencia")
                        .HasColumnType("datetime2")
                        .HasColumnName("Data_Vigencia");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("Valor");

                    b.HasKey("Id");

                    b.ToTable("PlanoTarifacao", (string)null);
                });

            modelBuilder.Entity("XPTO.Domain.Entities.Telefone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("varchar(13)")
                        .HasColumnName("Numero");

                    b.Property<string>("TipoTelefone")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("Telefone", (string)null);
                });

            modelBuilder.Entity("XPTO.Domain.Entities.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Login");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("Usuario", (string)null);
                });

            modelBuilder.Entity("ClienteConsulta", b =>
                {
                    b.HasOne("XPTO.Domain.Entities.Cliente", null)
                        .WithMany()
                        .HasForeignKey("ClientesId")
                        .IsRequired();

                    b.HasOne("XPTO.Domain.Entities.Consulta", null)
                        .WithMany()
                        .HasForeignKey("ConsultasId")
                        .IsRequired();
                });

            modelBuilder.Entity("OperacaoUsuario", b =>
                {
                    b.HasOne("XPTO.Domain.Entities.Operacao", null)
                        .WithMany()
                        .HasForeignKey("OperacoesId")
                        .IsRequired();

                    b.HasOne("XPTO.Domain.Entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UsuariosId")
                        .IsRequired();
                });

            modelBuilder.Entity("XPTO.Domain.Entities.Cliente", b =>
                {
                    b.OwnsOne("XPTO.Core.DomainObjects.ValueObjects.Cnpj", "Cnpj", b1 =>
                        {
                            b1.Property<Guid>("ClienteId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasColumnType("varchar(14)")
                                .HasColumnName("Cnpj");

                            b1.HasKey("ClienteId");

                            b1.ToTable("Cliente");

                            b1.WithOwner()
                                .HasForeignKey("ClienteId");
                        });

                    b.Navigation("Cnpj")
                        .IsRequired();
                });

            modelBuilder.Entity("XPTO.Domain.Entities.Consulta", b =>
                {
                    b.HasOne("XPTO.Domain.Entities.Contrato", "Contrato")
                        .WithOne("Consulta")
                        .HasForeignKey("XPTO.Domain.Entities.Consulta", "ContratoId");

                    b.HasOne("XPTO.Domain.Entities.Fornecedor", "Fornecedor")
                        .WithMany("Consultas")
                        .HasForeignKey("FornecedorId")
                        .IsRequired();

                    b.HasOne("XPTO.Domain.Entities.PlanoTarifacao", "PlanoTarifacao")
                        .WithMany("Consultas")
                        .HasForeignKey("PlanoTarifacaoId")
                        .IsRequired();

                    b.OwnsOne("XPTO.Core.DomainObjects.ValueObjects.Senha", "Senha", b1 =>
                        {
                            b1.Property<Guid>("ConsultaId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasColumnType("varchar(8)")
                                .HasColumnName("Senha");

                            b1.HasKey("ConsultaId");

                            b1.ToTable("Consulta");

                            b1.WithOwner()
                                .HasForeignKey("ConsultaId");
                        });

                    b.Navigation("Contrato");

                    b.Navigation("Fornecedor");

                    b.Navigation("PlanoTarifacao");

                    b.Navigation("Senha")
                        .IsRequired();
                });

            modelBuilder.Entity("XPTO.Domain.Entities.Telefone", b =>
                {
                    b.HasOne("XPTO.Domain.Entities.Cliente", null)
                        .WithMany("Telefones")
                        .HasForeignKey("ClienteId")
                        .IsRequired();
                });

            modelBuilder.Entity("XPTO.Domain.Entities.Usuario", b =>
                {
                    b.HasOne("XPTO.Domain.Entities.Cliente", null)
                        .WithMany("Usuarios")
                        .HasForeignKey("ClienteId")
                        .IsRequired();

                    b.OwnsOne("XPTO.Core.DomainObjects.ValueObjects.Senha", "Senha", b1 =>
                        {
                            b1.Property<Guid>("UsuarioId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasColumnType("varchar(8)")
                                .HasColumnName("Senha");

                            b1.HasKey("UsuarioId");

                            b1.ToTable("Usuario");

                            b1.WithOwner()
                                .HasForeignKey("UsuarioId");
                        });

                    b.Navigation("Senha")
                        .IsRequired();
                });

            modelBuilder.Entity("XPTO.Domain.Entities.Cliente", b =>
                {
                    b.Navigation("Telefones");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("XPTO.Domain.Entities.Contrato", b =>
                {
                    b.Navigation("Consulta")
                        .IsRequired();
                });

            modelBuilder.Entity("XPTO.Domain.Entities.Fornecedor", b =>
                {
                    b.Navigation("Consultas");
                });

            modelBuilder.Entity("XPTO.Domain.Entities.PlanoTarifacao", b =>
                {
                    b.Navigation("Consultas");
                });
#pragma warning restore 612, 618
        }
    }
}
